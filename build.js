/*

    node build.js --release

*/
// mark
var is_release = false
var drop_console = false
const auto_rebuild = false
const refresh_rebuild = true



// start
let bgd = './background/'
, ppd = './popup/'
, bgdsk = bgd + 'hacash_sdk'
, bgfls = [
    `./jslib/crypto-js.4.1.1`,
    `./jslib/crypto-util`,
    `./jslib/message-types`,
    `./jslib/hacash_sdk`,
    `${bgd}init`,
    `${bgd}listener`,
    `${bgd}account`,
    `${bgd}main`,
]
, pppjslibs = [
    `./jslib/crypto-util`,
    `./jslib/message-types`,
    `./jslib/hacash_sdk`,
]
, popup_common = [
    [
        'comp/wptip',
        'comp/wpcfm',
        'comp/wpass',
        'comp/swtgas',
        'login/init',
    ],
    ['html', 'comp'] // add login
]
;
// page def
let page_defs = {
    'moneynex': [
        [
            'index/home',
            'index/acinf',
            'index/dotrs',
        ],
        ['index']
    ], // index
    'connect': [
        [
            'connect/conn'   
        ],
        ['connect']
    ], // connect wallet

    'transfer': [
        [
            'transfer/sigtrs'   
        ],
        ['transfer']
    ] // sign transfer
}
;


// check command line argv
let pavs = process.argv
for(let i in pavs) {
    let p = pavs[i]
    if(p == '--release'){
        is_release = true
        drop_console = true
    }
}

let popups = (list) => {
    let ary = []
    for(let i in list) {
        let p = list[i]
        ary.push(`${ppd}${p}/${p}`)
    }
    return ary
}

var vuepuplist = (vuecomptpls, ext) => {
    let pups = []
    for(let i in vuecomptpls) {
        pups.push(`${ppd}${vuecomptpls[i]}/vue${ext?('.'+ext):''}`)
    }
    return pups
} 

// requires
const vue = require('vue')
const vue_compiler_dom = require('@vue/compiler-dom')
const babel = require("@babel/core")
const http = require('http')
const path = require('path')
const fs = require('fs')
const less = require('less')
const csso = require('csso')
const uglifyjs = require("uglify-js")
const uglifyjsconfig = { compress: {
    unsafe: true, hoist_funs: true, hoist_vars: true, 
    toplevel: true,  drop_console: drop_console,
}, mangle: { toplevel: true }}
const htmlMinify = require('html-minifier')
const htmlMinifyOptions = {
  continueOnParseError: true,
  includeAutoGeneratedTags: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  useShortDoctype: true,
  collapseWhitespace: true
}



////////////////////////

async function mergeFile(etx, fss, tarf, hdf, beforeist, rplsfn) {
    let fcons = [beforeist||'']
    for(let i in fss) {
        let f = fss[i]
        try{
            fcons.push( fs.readFileSync(f+"."+etx) + '')
        }catch(e){}
    }
    let fcon = fcons.join('\n') || ' '
    if(hdf) {
        fcon = await hdf(fcon)
    }
    if(rplsfn){
        fcon = rplsfn(fcon)
    }
    // dist
    fs.writeFileSync(tarf, fcon)
}

function jsminify(con) {
    // console.log(con)
    return uglifyjs.minify(con, uglifyjsconfig).code
}
function htmlminify(con) {
    return htmlMinify.minify(con, htmlMinifyOptions)
}

async function less2css(con) {
    let csscon = await less.render(con, {rewriteUrls: 'off'})
    let css = csscon.css.toString()
    if(is_release){
        css = csso.minify(css).css
    }
    return css
}

function release() {
    let bd = './release/'
    let dirs = [bd,
        bd+'background', 
        bd+'popup', 
        bd+'content', 
        bd+'image', 
        bd+'jslib', 
    ]
    for(let i in dirs) {
        try{ fs.mkdirSync(dirs[i]) }catch(e){}
    }
    // copy
    var cpfs = [
        'manifest.json',
        // 'background/hacash_sdk.wasm',
        'background/background.js',
        'content/content.min.js',
        'content/content.min.css',
        'content/hacash_api.min.js',
    ]
    for(let k in page_defs){
        cpfs = cpfs.concat([
            `popup/${k}.html`,
            `popup/${k}.css`,
            `popup/${k}.js`,
        ])
    }

    for(let i in cpfs){
        let f = cpfs[i];
        try{ 
            fs.copyFileSync('./'+f, bd+f)
        }catch(e){
            console.log(e)
        }
    }
    // copy dir
    copyDir('./image', bd+'image')
    copyDir('./jslib', bd+'jslib')
}

function getVueTplToJs(tpls, is_release) {
    var fnstrs = ['_Vue = Vue']
    for(let i in tpls) {
        // console.log('./popup/'+tpls[i]+'/vue.html')
        let t = tpls[i]
        , id = t.split('/').pop()
        , con = fs.readFileSync('./popup/'+t+'/vue.html')+''
        , cdd = vue_compiler_dom.compile(con, {
            // optimizeImports: true, prefixIdentifiers: true,
        })
        , vfn = `vue_tpl_${id} = function(){ ${cdd.code} }`
        if(is_release){
            // vfn = babel.transformSync(vfn,{ }).code   
        }
        fnstrs.push(vfn)
        // console.log(cdd.code)
    }
    return 'var ' + fnstrs.join("\n,") + ';'
}

// build
async function build(is_release) {


    // content    
    await mergeFile('js', [
        './jslib/message-types', 'content/define', 'content/hacash_api' 
    ], `content/hacash_api.min.js`, is_release?jsminify:null)
    await mergeFile('js', [
        './jslib/message-types', 'content/define', 'content/content'
    ], `content/content.min.js`, is_release?jsminify:null)
    await mergeFile('less', ['content/content'], `content/content.min.css`, less2css)
    // background
    await mergeFile('js', bgfls, `${bgd}background.js`, is_release?jsminify:null)


    // build page: moneynex and more 
    for(let k in page_defs){
        let v = page_defs[k]
        buildPageSource(k, v, is_release)
    }

    // build ok
    console.log(`build ${is_release?'release ':''}at ${new Date().toLocaleString()}`)   
}

// 

async function buildPageSource(pname, plist, is_release) {
    let plist_1 = ['login'].concat(plist[1], ['tail']) // add login and tail
    // console.log(plist_1)

    // vue tpl
    let beforejs = getVueTplToJs(popup_common[0].concat(plist[0]), is_release)
    , pupjss = pppjslibs
        .concat(popups(popup_common[1]))
        .concat(vuepuplist(popup_common[0]))
        .concat(vuepuplist(plist[0]))
        .concat(popups(plist_1))
    
    // console.log(pupjss)
    await mergeFile('js', pupjss, `${ppd}${pname}.js`, is_release?jsminify:null, beforejs)
    await mergeFile('html', popups(popup_common[1]).concat(popups(plist_1)), `${ppd}${pname}.html`, is_release?htmlminify:null, null, res=>{
        return res.replace(
            `href=./popup.css`, `href=./${pname}.css`).replace(
            `src=./popup.js`, `src=./${pname}.js`)
    })
    let pupless = popups(popup_common[1]).concat(vuepuplist(popup_common[0])).concat(vuepuplist(plist[0])).concat(popups(plist_1))
    await mergeFile('less', pupless, `${ppd}${pname}.css`, less2css)

}

// run
async function run(is_release) {

    // do build
    await build(is_release)

    if(is_release){
        console.log(`do release...`) 
        release()
        console.log(`ok.`) 
    }else if(auto_rebuild){
        setTimeout(run, auto_rebuild*1000)
    }else if(refresh_rebuild){
        http.createServer(async function (request, response) {
            await build()
            response.end('rebuild ok');
        }).listen(7890);
    }
}


run(is_release).then()


/*

  const cdd = vue_compiler_dom.compile('<div>{{ msg }}</div>')
  console.log(cdd.code)
  
*/


////////////////////////




function copyDir(sd, td)  {
    const sourceFile = fs.readdirSync(sd, { withFileTypes: true })
    for (const file of sourceFile) {
      const srcFile = path.resolve(sd, file.name)
      const tagFile = path.resolve(td, file.name)
      if (file.isDirectory() && !fs.existsSync(tagFile)) {
        fs.mkdirSync(tagFile, err => console.log(err))
        copyDir(srcFile, tagFile)
      } else if (file.isDirectory() && fs.existsSync(tagFile)) {
        copyDir(srcFile, tagFile)
      }
      !file.isDirectory() && fs.copyFileSync(srcFile, tagFile, fs.constants.COPYFILE_FICLONE)
    }
  }